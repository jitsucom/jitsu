name: Backend CI

on:
  push:
    branches:
      - '**'

jobs:

  backend-build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.head_ref }}
        # Make sure the value of GITHUB_TOKEN will not be persisted in repo's config
        persist-credentials: false

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        # * Build cache (Windows)
        path: |
          ~/go/pkg/mod
        #  ~/.cache/go-build
        #  ~/Library/Caches/go-build
        #  %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Check whether golang code was changed
      id: go-change
      run: |
        echo ::set-output name=server::1
        echo ::set-output name=backend::1
#        git diff @~..@ --quiet server || echo ::set-output name=server::1
#        git diff @~..@ --quiet configurator/backend || echo ::set-output name=backend::1
      working-directory: ./


    - name: Golang code changed status
      env:
        SERVER_CHANGED: ${{ steps.go-change.outputs.server }}
        BACKEND_CHANGED: ${{ steps.go-change.outputs.backend }}
      run: echo TMP WORKAROUND - now it always "changed". Server changed - $SERVER_CHANGED Backend changed - $BACKEND_CHANGED

    - name: Build Server
      if: ${{ success() && (steps.go-change.outputs.server == 1 || steps.go-change.outputs.backend == 1) }}
      run: |
        go mod download
        go build
      working-directory: ./server

    - name: Build Backend
      if: ${{ success() && (steps.go-change.outputs.server == 1 || steps.go-change.outputs.backend == 1) }}
      run: |
        go get github.com/deepmap/oapi-codegen/cmd/oapi-codegen
        go generate
        go mod download
        go build
      working-directory: ./configurator/backend

    - name: Test Server
      if: ${{ success() && (steps.go-change.outputs.server == 1 || steps.go-change.outputs.backend == 1) }}
      run: |
        go test -parallel=1 -json ./... > test_report.json
      working-directory: ./server

    - name: Test Report
      if: ${{ always() && (steps.go-change.outputs.server == 1 || steps.go-change.outputs.backend == 1) }}
      run: |
        go install github.com/vakenbolt/go-test-report@latest
        cat test_report.json | ~/go/bin/go-test-report
      working-directory: ./server

    - uses: actions/upload-artifact@v2
      if: ${{ always() && (steps.go-change.outputs.server == 1 || steps.go-change.outputs.backend == 1) }}
      with:
        name: test-report
        path: |
          ./server/test_report.html
 
    - name: Notify to Slack on Errors
      uses: rtCamp/action-slack-notify@v2.2.0
      if: ${{ failure() && (steps.go-change.outputs.server == 1 || steps.go-change.outputs.backend == 1) && (github.ref_name == 'beta' || github.ref_name == 'master' ) }}
      env:
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON_EMOJI: ðŸ‘¿
        SLACK_WEBHOOK: ${{ secrets.SLACK_CI_BACKEND_WEBHOOK }}
        SLACK_FOOTER: ""
