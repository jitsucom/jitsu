openapi: 3.0.0
info:
  title: Jitsu API
  description: Jitsu API
  contact:
    name: Jitsu
    email: dev@jitsu.com
  license:
    name: MIT License
    url: "https://opensource.org/licenses/MIT"
  version: 1.0.0

tags:
  - name: configuration-management
    x-displayName: Configuration Management
    description: >
      API for managing Jitsu configuration: sources, destinations, API keys etc
  - name: user-provisioning
    x-displayName: User Provisioning
    description: >
      API for provisioning users. Works only for clusters with Redis-backed authorization, not
      for Firebase-backed. Requires authorization with cluster admin token
  - name: cluster-admin
    x-displayName: Cluster Admin
    description: >
      This API is used by Jitsu internally to communicate between components (Jitsu Server and Jitsu Configurator).
components:
  securitySchemes:
    clusterAdminAuth:
      x-displayName: 'Cluster Admin Auth'
      name: 'HTTP Authorization Bearer Auth'
      description: >
        HTTP Bearer Auth.
        Use `Authorization: Bearer <access token>` header.<br />

        As an <access token> it should be possible to use cluster admin key,
        or key created in UI
      type: http
      scheme: bearer
    configurationManagementAuth:
      name: 'HTTP Authorization Bearer Auth for managing configuration'
      description: >
        HTTP Bearer Auth.
        Use `Authorization: Bearer <access token>` header.<br />
        To obtain `<access token>` call **User sign in** method: `/api/v1/users/signin`; <br />
        Alternatively it's possible to use an admin token
      type: http
      scheme: bearer
  parameters:
    projectIdQuery:
      in: query
      name: project_id
      description: ID of the project
      required: true
      schema:
        type: string
    projectId:
      in: path
      name: projectId
      description: ID of the project
      required: true
      schema:
        type: string
    objectType:
      in: path
      name: objectType
      description: 'Type of object. Currently, following values are supported: destinations, sources, api_keys'
      required: true
      schema:
        type: string
    objectUid:
      in: path
      name: objectUid
      description: 'Unique ID of the object. The object id is sitting in /uid node of JSON object'
      required: true
      schema:
        type: string
    userId:
      name: userId
      description: Id of the user
      in: path
      required: true
      schema:
        type: string

  schemas:
    #Object that represents error with message and
    ErrorObject:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
      required:
        - message
    StatusObject:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
      required:
        - status
    VersionObject:
      type: object
      properties:
        version:
          type: string
        builtAt:
          type: string
      required:
        - version
        - builtAt
    NotificationConfig:
      type: object
      properties:
        slack:
          type: object
          properties:
            url: { type: string }
    ProjectSettings:
      type: object
      properties:
        notifications:
          $ref: "#/components/schemas/NotificationConfig"
    ProjectPermission:
      description: Enum of permissions types
      type: string
      enum:
       - view_config
       - modify_config
    PermissionsInfo:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/ProjectPermission"
    AnyObject:
      description: Any JSON Object
      type: object
      additionalProperties: { }
      example: # Sample object
        any_field1: 10
        any_field2: Some data
    AnyArray:
      description: Array of any JSON objects
      type: array
      items:
        $ref: "#/components/schemas/AnyObject"

    EmailAndPasswordRequest:
      type: object
      properties:
        email: { type: "string" }
        password: { type: "string" }
      required: [ 'email', 'password' ]
    TokensResponse:
      type: object
      properties:
        access_token: { type: "string" }
        refresh_token: { type: "string" }
        user_id: { type: "string" }
      required: [ access_token, refresh_token, user_id ]
    TokenResponse:
      type: object
      properties:
        token: { type: string }
      required: [ token ]
    SignupRequest:
      allOf:
        - $ref: '#/components/schemas/EmailAndPasswordRequest'
        - type: object
          properties:
            name: { type: "string" }
            company: { type: "string" }
            emailOptout: { type: "boolean" }
            usageOptout: { type: "boolean" }
          required: [ name, company, emailOptout, usageOptout ]
    ProjectIdRequest:
      type: object
      properties:
        projectID: { type: "string" }
      required: [ 'projectID' ]
    Project:
      type: object
      properties:
        id: { type: "string" }
        name: { type: "string" }
        requiresSetup: { type: "boolean" }
      required: [ 'id', 'name' ]

    ProjectWithPermissions:
      allOf:
        - $ref: '#/components/schemas/Project'
        - $ref: '#/components/schemas/PermissionsInfo'

    CreateProjectRequest:
      type: object
      properties:
        name: { type: string }
      required: [ 'name' ]

    UserBasicInfo:
      description: 'Basic information about user'
      type: object
      properties:
        id: { type: "string" }
        email: { type: "string" }
      required: [ 'id', 'email' ]

    ProjectUserPermissions:
      allOf: # Combines the UserBasicInfo and the PermissionsInfo
        - $ref: '#/components/schemas/UserBasicInfo'
        - $ref: '#/components/schemas/PermissionsInfo'


    User:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: '#/components/schemas/UserBasicInfo'
        - type: object
          properties:
            name: { type: "string" }
            created: { type: "string" }
            emailOptout: { type: "boolean" }
            forcePasswordChange: { type: "boolean" }
            suggestedCompanyName: { type: "string" }
            platformAdmin: { type: "boolean" }
          required: [ 'created' ]
    CreateUserRequest:
      type: object
      properties:
        name: { type: string }
        email: { type: string }
        projectName: { type: string }
        projectId: { type: string }
        platformAdmin: { type: boolean }
      required: [ 'email' ]
    PatchUserRequest:
      type: object
      properties:
        name: { type: "string" }
        forcePasswordChange:
          type: boolean
          description: if set to true, user will be forced to change the password during next login
        password:
          type: string
          description: New password to assign a user
        platformAdmin:
          type: boolean
          description: if set to true, user will become platform admin
    ProjectInfo:
      type: object
      properties:
        _id: { type: string }
        _name: { type: string }
        _requireSetup: { type: boolean }
      required: [ '_id', '_name' ]
    SuggestedInfo:
      type: object
      properties:
        companyName: { type: string }
        email: { type: string }
        name: { type: string }
    UserInfo:
      type: object
      properties:
        _uid: { type: string }
        _created: { type: string }
        _lastUpdated: { type: string }
        _email: { type: string }
        _emailOptout: { type: boolean }
        _name: { type: string }
        _forcePasswordChange: { type: boolean }
        _onboarded: { type: boolean }
        _platformAdmin: { type: boolean }
        _sso_subject: { type: string }
        _sso_profile: { type: object }
        _sso_profile_error: { type: string }
        _suggestedInfo:
          $ref: '#/components/schemas/SuggestedInfo'
        _project:
          $ref: '#/components/schemas/ProjectInfo'
      required: [ '_uid', '_created', '_email' ]
    ProjectInfoUpdate:
      type: object
      properties:
        _id: { type: string }
        _name: { type: string }
        _requireSetup: { type: boolean }
    UpdateUserInfoRequest:
      type: object
      properties:
        _emailOptout: { type: boolean }
        _name: { type: string }
        _forcePasswordChange: { type: boolean }
        _onboarded: { type: boolean }
        _platformAdmin: { type: boolean }
        _suggestedInfo:
          $ref: '#/components/schemas/SuggestedInfo'
        _project:
          $ref: '#/components/schemas/ProjectInfoUpdate'
    LinkProjectRequest:
      type: object
      properties:
        userId:
          type: string
          description: User Id to link to the project. Alternatively, userEmail could be specified
        userEmail:
          type: string
          description: User email to link to the project. Alternatively, userId could be specified
        callback:
          type: string
          description: >
            Callback URL will be used for generating reset password links
            when creating a new user (only on Redis-backed authorization).
    PatchProjectRequest:
      type: object
      properties:
        name: { type: "string" }
        requiresSetup: { type: "boolean" }

  responses:
    Error:
      description: "Error response"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/ErrorObject"
    StatusResponse:
      description: "Response contains status and message"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/StatusObject"
    VersionResponse:
      description: "Response contains Jitsu version"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/VersionObject"
    AnyObjectResponse:
      description: "Any JSON object"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/AnyObject"
    AnyArrayResponse:
      description: "Array of any JSON objects"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/AnyArray"
    ProjectSettingsResponse:
      description: "Project settings"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/ProjectSettings"
    CreateUserResponse:
      description: >
        New user. Some fields (created, emailOptout, forcePasswordChange) will be assigned automatically. If new project is created,
        the project node will contain an id with new project. Otherwise project node will be present too, but it will contain
        the linked project object
      content:
        "application/json":
          schema:
            type: object
            properties:
              user:
                $ref: "#/components/schemas/User"
              project:
                $ref: "#/components/schemas/Project"
              resetId:
                type: string
                description: The reset ID may further be submitted to /api/v1/users/password/change in order to set user password.
            required: [ user, project, resetId ]
    LinkProjectResponse:
      description: "List of users with access to given project"
      content:
        "application/json":
          schema:
            type: object
            properties:
              projectUsers:
                type: array
                items: { $ref: '#/components/schemas/UserBasicInfo' }
              userStatus:
                type: string
                description: existing if user has been found, or created if user has been created
            required: [ 'projectUsers', 'userStatus' ]
paths:
  /api/v1/users/signin:
    post:
      tags:
        - configuration-management
      operationId: 'User sign in'
      description: Sign-in user with login and password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailAndPasswordRequest'
      responses:
        "200":
          description: 'Success login'
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/TokensResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/users/signup:
    post:
      tags:
        - configuration-management
      operationId: 'User sign up'
      description: Create a user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        "200":
          description: 'Success login'
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/TokensResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/users/signout:
    post:
      tags:
        - configuration-management
      operationId: 'User sign out'
      description: Delete token from DB
      security:
        - configurationManagementAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/StatusResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/users/token/refresh:
    post:
      tags:
        - configuration-management
      operationId: 'User authorization token refresh'
      description: Refresh user access token
      requestBody:
        content:
          "application/json":
            schema:
              title: TokenRefreshRequest
              type: object
              properties:
                refresh_token: { type: "string" }
              required: [ refresh_token ]
      responses:
        200:
          description: Success refresh
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/TokensResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/users/password/reset:
    post:
      tags:
        - configuration-management
      operationId: 'User password reset'
      description: 'Request password reset'
      requestBody:
        content:
          "application/json":
            schema:
              title: UserPasswordResetRequest
              description: callback field will be used in a password reset email as reset link URL
              type: object
              properties:
                email: { type: string }
                callback: { type: string }
              required: [ email ]
      responses:
        "200":
          $ref: '#/components/responses/StatusResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/users/password/change:
    post:
      tags:
        - configuration-management
      operationId: 'User password change'
      description: 'Change password'
      requestBody:
        content:
          "application/json":
            schema:
              title: UserPasswordChangeRequest
              type: object
              properties:
                new_password: { type: string }
                reset_id: { type: string }
              required: [ 'new_password' ]
      responses:
        "200":
          description: 'Success password changing'
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/TokensResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/users/info:
    get:
      tags:
        - configuration-management
      operationId: 'Get User info'
      description: 'Returns a current authenticated user'
      security:
        - configurationManagementAuth: [ ]
      responses:
        '200':
          description: "User info"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserInfo"
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - configuration-management
      operationId: "Update user info"
      description: >
        Merge (patch) users settings with into an existing user object. Changes to some fields (such as security settings), will not have an effect. All fields
        will be ignored, except: _emailOptout, _name, _forcePasswordChange, _name, _onboarded, _suggestedInfo, _project
      security:
        - configurationManagementAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserInfoRequest'
      responses:
        '200':
          description: "Updated user info"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/users/email/change:
    post:
      tags:
        - cluster-admin
      operationId: 'User email change'
      description: 'Change email'
      security:
        - clusterAdminAuth: [ ]
      requestBody:
        content:
          "application/json":
            schema:
              title: UserEmailChangeRequest
              type: object
              properties:
                old_email: { type: string }
                new_email: { type: string }
              required: [ old_email, new_email ]
      responses:
        "200":
          $ref: '#/components/responses/StatusResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/system/configuration:
    get:
      tags:
        - configuration-management
      operationId: 'Get system configuration'
      description: Returns system configuration
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/system/version:
    get:
      tags:
        - configuration-management
      operationId: 'Get system version'
      description: Returns the version of Jitsu sotware running on the server
      responses:
        '200':
          $ref: '#/components/responses/VersionResponse'
        default:
          $ref: '#/components/responses/Error'

  /api/v1/geo_data_resolvers:
    get:
      tags:
        - cluster-admin
      operationId: 'Get geo data resolvers'
      description: Returns available geo resolvers
      security:
        - clusterAdminAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'

  /api/v2/audit/purge:
    get:
      parameters:
        - name: from
          description: Interval start in Unix millis. If not set, the interval will not be bounded on the left.
          in: query
          schema:
            type: integer
            x-go-type: int64
        - name: to
          description: Interval end in Unix millis. If not set, the interval will not be bounded on the right.
          in: query
          schema:
            type: integer
            x-go-type: int64
      tags:
        - cluster-admin
      operationId: 'Purge audit'
      description: Purges ALL audit records in the specified interval.
      security:
        - clusterAdminAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/StatusResponse'
        default:
          $ref: '#/components/responses/Error'

  /api/v2/project/{projectId}/users:
    get:
      parameters:
        - $ref: '#/components/parameters/projectId'
      tags:
        - configuration-management
      operationId: "Get users link to projects"
      description: Returns users linked to project
      security:
        - configurationManagementAuth: [ ]
      responses:
        '200':
          description: "List of users with access to given project"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectUserPermissions'

        default:
          $ref: '#/components/responses/Error'

  /api/v2/project/{projectId}/link:
    post:
      parameters:
        - $ref: '#/components/parameters/projectId'
      tags:
        - user-provisioning
      operationId: "Link user to project"
      description: >
        Links user to project. If userId is specified, the user should just be linked. If userEmail is specified, the logic should be as follows:
         - Try to find user with userEmail. If user has been found, just link it
         - If user is not found, the user should be created and linked to the project. Later we'll add email notification
      security:
        - configurationManagementAuth: [ ]
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/LinkProjectRequest'
      responses:
        '200':
          $ref: '#/components/responses/LinkProjectResponse'
        default:
          $ref: '#/components/responses/Error'

  /api/v2/project/{projectId}/unlink:
    get:
      parameters:
        - $ref: '#/components/parameters/projectId'
        - name: userId
          description: User Id to link to the project. Alternatively, userEmail could be specified
          in: query
          required: true
          schema:
            type: string
      tags:
        - user-provisioning
      operationId: "Unlink user from project"
      description: >
        Removes user from the project. Note: users can remove themselves from the project
      security:
        - configurationManagementAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/StatusResponse'
        default:
          $ref: '#/components/responses/Error'

  /api/v2/project/{projectId}/permissions/{userId}:
    parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/userId'
    post:
      tags:
        - configuration-management
      operationId: 'Update project permission for user'
      security:
        - configurationManagementAuth: [ ]
      description: >
        Updates permissions for provided userId to access projectId (view_config, modify_config). Object will be replaced.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionsInfo'
      responses:
        '200':
          $ref: '#/components/responses/StatusResponse'
        default:
          $ref: '#/components/responses/Error'

  /api/v2/users:
    get:
      operationId: List users
      description: Get all users. Available only for Redis-backed authorization
      tags:
        - user-provisioning
      security:
        - clusterAdminAuth: [ ]
      responses:
        '200':
          description: List of users
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/Error'
    post:
      operationId: Create new user
      description: Create new user. Available only for Redis-backed authorization
      tags:
        - user-provisioning
      security:
        - clusterAdminAuth: [ ]
      requestBody:
        description: >
          Email and (optional) password. If password is not set, a random one
          will be generated and returned with response.

          projectId or projectName should be specified. If projectId is set, user will be linked to
          existing project (project with such id should exist). Otherwise a new project will be created
          with name=projectName
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          $ref: '#/components/responses/CreateUserResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v2/users/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    delete:
      tags:
        - user-provisioning
      operationId: Delete User
      description: Delete user by id. Available only for Redis-backed authorization
      security:
        - clusterAdminAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/StatusResponse'
        default:
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - user-provisioning
      operationId: Update user
      description: Update user. See documentation on request body. Available only for Redis-backed authorization
      security:
        - clusterAdminAuth: [ ]
      requestBody:
        description: >
          Any combination of the fields should be present. Only fields present in request will be updated
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/PatchUserRequest"
      responses:
        '200':
          description: Updated user data
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/Error'

  /api/v2/projects:
    get:
      parameters:
        - name: allProjects
          description: >
            Should the method return all projects, not only available to current user. Only users
            authenticated with cluster-admin token (or users with cluster admin permission) can set this
            to true. Otherwise, error will be thrown
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - configuration-management
      operationId: "Get projects"
      description: Returns a list of projects available for current user
      security:
        - configurationManagementAuth: [ ]
      responses:
        '200':
          description: "List of projects"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectWithPermissions'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - configuration-management
      operationId: "Create project and link user"
      description: >
        Creates a new project, links current user and returns the project with ID.
        If id is present in request body, it should be ignored
      security:
        - configurationManagementAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '200':
          description: "Created project"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Project"
        default:
          $ref: '#/components/responses/Error'

  /api/v2/projects/{projectId}:
    parameters:
      - $ref: '#/components/parameters/projectId'
    patch:
      tags:
        - configuration-management
      operationId: 'Patch project'
      security:
        - configurationManagementAuth: [ ]
      description: >
        Updates a project for a given project ID. Object will be patched: request body properties will be merged into an original object,
        it's ok to send partial objects. Some fields might be ignored and overwritten.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchProjectRequest'
      responses:
        '200':
          description: "Updated project"
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/Project'
        default:
          $ref: '#/components/responses/Error'

  /api/v2/projects/{projectId}/settings:
    parameters:
      - $ref: '#/components/parameters/projectId'
    get:
      tags:
        - configuration-management
      operationId: 'Get project settings'
      security:
        - configurationManagementAuth: [ ]
      description: Get project settings for a given project ID
      responses:
        '200':
          $ref: '#/components/responses/ProjectSettingsResponse'
        default:
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - configuration-management
      operationId: 'Patch project settings'
      security:
        - configurationManagementAuth: [ ]
      description: >
        Updates a project settings for a given project ID. Object will be patched: request body properties will be merged into an original object,
        it's ok to send partial objects. Some fields might be ignored and overwritten. The method returns an updated object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSettings'
      responses:
        '200':
          $ref: '#/components/responses/ProjectSettingsResponse'
        default:
          $ref: '#/components/responses/Error'

  /api/v2/objects/{projectId}/{objectType}:
    parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/objectType'
    get:
      tags:
        - configuration-management
      operationId: 'Get objects by projectId and objectType'
      security:
        - configurationManagementAuth: [ ]
      description: Returns the list of objects of given type
      responses:
        '200':
          $ref: '#/components/responses/AnyArrayResponse'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - configuration-management
      operationId: 'Create object in project'
      description: >
        Create new object. The method returns newly created object. Some properties of
        newly created object might different from on which has been posted (for example, ID)
      security:
        - configurationManagementAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyObject'
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v2/objects/{projectId}/{objectType}/{objectUid}:
    parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/objectType'
      - $ref: '#/components/parameters/objectUid'
    get:
      tags:
        - configuration-management
      operationId: 'Get object by uid'
      description: Get an object with given UID
      security:
        - configurationManagementAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'

    delete:
      tags:
        - configuration-management
      operationId: "Delete object by uid"
      description: Delete an object with given UID. Returns a deleted object
      security:
        - configurationManagementAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - configuration-management
      operationId: "Patch object by uid"
      description: >
        Patches object with given ID. Object will be patched: request body properties will be merged into an original object, it's ok to send partial objects
        Some fields might be ignored and overwritten. The method returns an updated object
      security:
        - configurationManagementAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyObject'
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'
    put:
      tags:
        - configuration-management
      operationId: "Replace object by uid"
      description: >
        Save object with given ID. The whole object except id field will be overwritten. The method returns an updated object
      security:
        - configurationManagementAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyObject'
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/telemetry:
    get:
      tags:
        - cluster-admin
      operationId: 'Get telemetry settings'
      description: Returns current telemetry configuration
      security:
        - clusterAdminAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/sources:
    get:
      tags:
        - cluster-admin
      operationId: 'Get sources configuration'
      description: Returns all configured sources
      security:
        - clusterAdminAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'

  /api/v1/sources/test:
    post:
      tags:
        - configuration-management
      operationId: 'Test source configuration'
      description: >
        Test configured source connection. This method is used on Configurator UI on source save.
        Proxies request to Jitsu Server.
      security:
        - configurationManagementAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyObject'
      responses:
        '200':
          $ref: '#/components/responses/StatusResponse'
        default:
          $ref: '#/components/responses/AnyObjectResponse'

  /api/v1/destinations:
    get:
      tags:
        - cluster-admin
      operationId: 'Get destinations configuration'
      description: Returns all configured destinations
      security:
        - clusterAdminAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'

  /api/v1/destinations/test:
    post:
      tags:
        - configuration-management
      operationId: 'Test destination configuration'
      description: >
        Test configured destination connection. This method is used on Configurator UI on destination save.
        Proxies request to Jitsu Server.
      security:
        - configurationManagementAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyObject'
      responses:
        '200':
          $ref: '#/components/responses/StatusResponse'
        default:
          $ref: '#/components/responses/AnyObjectResponse'

  /api/v1/destinations/evaluate:
    post:
      tags:
        - configuration-management
      operationId: 'Evaluate destination JS transformation script'
      description: >
        Evaluate destination Javascript transformation script and return the result.
      security:
        - configurationManagementAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyObject'
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'

  /api/v1/apikeys:
    get:
      tags:
        - cluster-admin
      operationId: 'Get api keys configuration'
      description: Returns all configured api keys
      security:
        - clusterAdminAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'

  /api/v1/ssl:
    parameters:
      - $ref: '#/components/parameters/projectIdQuery'
      - in: query
        name: async
        description: Flag for reissue certificates asynchonisly
        required: false
        schema:
          type: boolean
    post:
      tags:
        - configuration-management
      operationId: 'Reissue project SSL certificates'
      description: >
        Initiate the reissue project SSL certificate pipeline. Method is only available on cloud.jitsu.com.
      security:
        - configurationManagementAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyObject'
      responses:
        '200':
          $ref: '#/components/responses/StatusResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/ssl/all:
    parameters:
      - in: query
        name: async
        description: Flag for reissue certificates asynchonisly
        required: false
        schema:
          type: boolean
    post:
      tags:
        - cluster-admin
      operationId: 'Reissue all configured SSL certificates'
      description: >
        Initiate the reissue all configured SSL certificates pipeline. Method is only available on cloud.jitsu.com.
      security:
        - clusterAdminAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/StatusResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/jitsu/configuration:
    parameters:
      - $ref: '#/components/parameters/projectIdQuery'
    get:
      tags:
        - configuration-management
      operationId: 'Generate Jitsu Server yaml configuration'
      description: >
        Generate Jitsu Server yaml configuration payload for the current project (including api keys, sources, destinations configs)
      security:
        - configurationManagementAuth: [ ]
      responses:
        '200':
          description: "Response contains Jitsu Server yaml configuration"
          content:
            "application/yaml":
              schema:
                description: Any YAML Object
                type: object
                additionalProperties: { }
                example: # Sample object
                  server:
                    name: Uvsnj # rename server if another name is desired
                  api_keys:
                    - id: 'apikey1'
                      client_secret: 'client_secret1'
                      server_secret: 'server_secret1'
        default:
          $ref: '#/components/responses/Error'

  /api/v1/database:
    post:
      tags:
        - configuration-management
      operationId: 'Create free tier Postgres database'
      description: >
        Create free tier Postgres database. Method is only available on cloud.jitsu.com.
        Return Postgres destination configuration.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectIdRequest'
      security:
        - configurationManagementAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/AnyObjectResponse'
        default:
          $ref: '#/components/responses/Error'
